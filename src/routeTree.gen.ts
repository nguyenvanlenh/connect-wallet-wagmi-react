/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as Page2Import } from './routes/page2'
import { Route as Page1Import } from './routes/page1'
import { Route as ProtectedImport } from './routes/_protected'
import { Route as IndexImport } from './routes/index'
import { Route as ProtectedComponentAuthoriedImport } from './routes/_protected/component-authoried'

// Create/Update Routes

const Page2Route = Page2Import.update({
  id: '/page2',
  path: '/page2',
  getParentRoute: () => rootRoute,
} as any)

const Page1Route = Page1Import.update({
  id: '/page1',
  path: '/page1',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedRoute = ProtectedImport.update({
  id: '/_protected',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedComponentAuthoriedRoute =
  ProtectedComponentAuthoriedImport.update({
    id: '/component-authoried',
    path: '/component-authoried',
    getParentRoute: () => ProtectedRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedImport
      parentRoute: typeof rootRoute
    }
    '/page1': {
      id: '/page1'
      path: '/page1'
      fullPath: '/page1'
      preLoaderRoute: typeof Page1Import
      parentRoute: typeof rootRoute
    }
    '/page2': {
      id: '/page2'
      path: '/page2'
      fullPath: '/page2'
      preLoaderRoute: typeof Page2Import
      parentRoute: typeof rootRoute
    }
    '/_protected/component-authoried': {
      id: '/_protected/component-authoried'
      path: '/component-authoried'
      fullPath: '/component-authoried'
      preLoaderRoute: typeof ProtectedComponentAuthoriedImport
      parentRoute: typeof ProtectedImport
    }
  }
}

// Create and export the route tree

interface ProtectedRouteChildren {
  ProtectedComponentAuthoriedRoute: typeof ProtectedComponentAuthoriedRoute
}

const ProtectedRouteChildren: ProtectedRouteChildren = {
  ProtectedComponentAuthoriedRoute: ProtectedComponentAuthoriedRoute,
}

const ProtectedRouteWithChildren = ProtectedRoute._addFileChildren(
  ProtectedRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof ProtectedRouteWithChildren
  '/page1': typeof Page1Route
  '/page2': typeof Page2Route
  '/component-authoried': typeof ProtectedComponentAuthoriedRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof ProtectedRouteWithChildren
  '/page1': typeof Page1Route
  '/page2': typeof Page2Route
  '/component-authoried': typeof ProtectedComponentAuthoriedRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_protected': typeof ProtectedRouteWithChildren
  '/page1': typeof Page1Route
  '/page2': typeof Page2Route
  '/_protected/component-authoried': typeof ProtectedComponentAuthoriedRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '' | '/page1' | '/page2' | '/component-authoried'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '' | '/page1' | '/page2' | '/component-authoried'
  id:
    | '__root__'
    | '/'
    | '/_protected'
    | '/page1'
    | '/page2'
    | '/_protected/component-authoried'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ProtectedRoute: typeof ProtectedRouteWithChildren
  Page1Route: typeof Page1Route
  Page2Route: typeof Page2Route
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ProtectedRoute: ProtectedRouteWithChildren,
  Page1Route: Page1Route,
  Page2Route: Page2Route,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.jsx",
      "children": [
        "/",
        "/_protected",
        "/page1",
        "/page2"
      ]
    },
    "/": {
      "filePath": "index.jsx"
    },
    "/_protected": {
      "filePath": "_protected.jsx",
      "children": [
        "/_protected/component-authoried"
      ]
    },
    "/page1": {
      "filePath": "page1.jsx"
    },
    "/page2": {
      "filePath": "page2.jsx"
    },
    "/_protected/component-authoried": {
      "filePath": "_protected/component-authoried.jsx",
      "parent": "/_protected"
    }
  }
}
ROUTE_MANIFEST_END */
